<Activity mc:Ignorable="sap sap2010" x:Class="DisplayForm" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mva="clr-namespace:Microsoft.VisualBasic.Activities;assembly=System.Activities" xmlns:njl="clr-namespace:Newtonsoft.Json.Linq;assembly=Newtonsoft.Json" xmlns:s="clr-namespace:System;assembly=System.Private.CoreLib" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=System.Private.CoreLib" xmlns:sd="clr-namespace:System.Data;assembly=System.Data" xmlns:snm="clr-namespace:System.Net.Mail;assembly=System" xmlns:ufa="clr-namespace:UiPath.Form.Activities;assembly=UiPath.Form.Activities" xmlns:ui="http://schemas.uipath.com/workflow/activities" xmlns:uia="clr-namespace:UiPath.IPC.Activities;assembly=UiPath.IPC.Activities" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <x:Members>
    <x:Property Name="io_dict_Config" Type="InOutArgument(scg:Dictionary(x:String, x:Object))" />
  </x:Members>
  <mva:VisualBasic.Settings>
    <x:Null />
  </mva:VisualBasic.Settings>
  <sap:VirtualizedContainerService.HintSize>1094,2452</sap:VirtualizedContainerService.HintSize>
  <sap2010:WorkflowViewState.IdRef>DisplayForm_1</sap2010:WorkflowViewState.IdRef>
  <TextExpression.NamespacesForImplementation>
    <scg:List x:TypeArguments="x:String" Capacity="60">
      <x:String>System.Activities</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.Activities.Expressions</x:String>
      <x:String>System.Activities.Validation</x:String>
      <x:String>System.Activities.XamlIntegration</x:String>
      <x:String>Microsoft.VisualBasic</x:String>
      <x:String>Microsoft.VisualBasic.Activities</x:String>
      <x:String>System</x:String>
      <x:String>System.Collections</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Diagnostics</x:String>
      <x:String>System.Drawing</x:String>
      <x:String>System.IO</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Net.Mail</x:String>
      <x:String>System.Xml</x:String>
      <x:String>System.Xml.Linq</x:String>
      <x:String>UiPath.Core</x:String>
      <x:String>UiPath.Core.Activities</x:String>
      <x:String>System.Windows.Markup</x:String>
      <x:String>System.Runtime.InteropServices</x:String>
      <x:String>System.Reflection</x:String>
      <x:String>System.Runtime.Serialization</x:String>
      <x:String>System.ComponentModel</x:String>
      <x:String>System.Xml.Serialization</x:String>
      <x:String>System.Collections.ObjectModel</x:String>
      <x:String>UiPath.Form.Activities</x:String>
      <x:String>System.Activities.DynamicUpdate</x:String>
      <x:String>UiPath.DataTableUtilities</x:String>
      <x:String>UiPath.Excel</x:String>
      <x:String>UiPath.Excel.Activities</x:String>
      <x:String>Microsoft.VisualBasic.CompilerServices</x:String>
      <x:String>Newtonsoft.Json.Linq</x:String>
      <x:String>Newtonsoft.Json</x:String>
      <x:String>System.Dynamic</x:String>
      <x:String>System.Collections.Specialized</x:String>
      <x:String>UiPath.Web.Activities</x:String>
      <x:String>UiPath.Platform.Triggers</x:String>
      <x:String>UiPath.IPC.Activities</x:String>
      <x:String>UiPath.Platform.Triggers.Scope</x:String>
      <x:String>UiPath.Core.Activities.Model</x:String>
      <x:String>UiPath.Shared.Activities</x:String>
      <x:String>System.Text.Json</x:String>
      <x:String>UiPath.UIAutomationCore.Contracts</x:String>
      <x:String>UiPath.Excel.Activities.Business</x:String>
      <x:String>UiPath.Mail</x:String>
      <x:String>UiPath.Mail.Outlook.Activities</x:String>
      <x:String>UiPath.Mail.Activities</x:String>
      <x:String>UiPath.Mail.Activities.Business</x:String>
      <x:String>UiPath.Platform.ResourceHandling</x:String>
      <x:String>UiPath.UIAutomationNext.Models.ExtractData</x:String>
      <x:String>UiPath.UIAutomationNext.Enums</x:String>
      <x:String>UiPath.UIAutomationNext.Activities</x:String>
      <x:String>UiPath.Platform.ObjectLibrary</x:String>
      <x:String>Microsoft.Graph</x:String>
      <x:String>System.Security</x:String>
      <x:String>UiPath.MicrosoftOffice365.Enums</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities</x:String>
      <x:String>UiPath.MicrosoftOffice365.Activities.Calendar</x:String>
    </scg:List>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <scg:List x:TypeArguments="AssemblyReference" Capacity="52">
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>Microsoft.VisualBasic</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Data.DataSetExtensions</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Drawing</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>PresentationFramework</AssemblyReference>
      <AssemblyReference>WindowsBase</AssemblyReference>
      <AssemblyReference>PresentationCore</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities</AssemblyReference>
      <AssemblyReference>UiPath.UiAutomation.Activities</AssemblyReference>
      <AssemblyReference>System.Memory</AssemblyReference>
      <AssemblyReference>System.Reflection.Metadata</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>Microsoft.Bcl.AsyncInterfaces</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>UiPath.Form.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.Excel.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Excel</AssemblyReference>
      <AssemblyReference>System.ValueTuple</AssemblyReference>
      <AssemblyReference>System.ComponentModel.Composition</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities.Design</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationCore</AssemblyReference>
      <AssemblyReference>Newtonsoft.Json</AssemblyReference>
      <AssemblyReference>UiPath.Web.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Platform</AssemblyReference>
      <AssemblyReference>UiPath.IPC.Activities</AssemblyReference>
      <AssemblyReference>UiPath.Callout.Activity</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities</AssemblyReference>
      <AssemblyReference>UiPath.OCR.Activities</AssemblyReference>
      <AssemblyReference>UiPath.WPFInteractive.Activities</AssemblyReference>
      <AssemblyReference>UiPath.System.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Text.Json</AssemblyReference>
      <AssemblyReference>NPOI</AssemblyReference>
      <AssemblyReference>UiPath.Mail</AssemblyReference>
      <AssemblyReference>UiPath.Mail.Activities.Design</AssemblyReference>
      <AssemblyReference>System.Memory.Data</AssemblyReference>
      <AssemblyReference>System.Linq.Async</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext</AssemblyReference>
      <AssemblyReference>UiPath.UIAutomationNext.Activities</AssemblyReference>
      <AssemblyReference>netstandard</AssemblyReference>
      <AssemblyReference>Microsoft.Graph.Core</AssemblyReference>
      <AssemblyReference>Microsoft.Graph</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365</AssemblyReference>
      <AssemblyReference>UiPath.MicrosoftOffice365.Activities</AssemblyReference>
    </scg:List>
  </TextExpression.ReferencesForImplementation>
  <Sequence sap2010:Annotation.AnnotationText="This workflow displays the User Inputs Form. &#xA;&#xA;The form has all its components inside a single Container component. &#xA;We pass our Config dictionary (via an object) to the Container component so that the form can be populated with the Config dictionary values and vice versa.&#xA;&#xA;Based on the button pressed in the form, the automation will execute the process associated with that button and either 1) return execution to the form (Click button) or 2) proceed to the Results Form state (Submit button)." DisplayName="DisplayForm" sap:VirtualizedContainerService.HintSize="1104,2387" sap2010:WorkflowViewState.IdRef="Sequence_1">
    <Sequence.Variables>
      <Variable x:TypeArguments="x:String" Name="str_selectedButton" />
      <Variable x:TypeArguments="x:Object" Name="obj_container" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="list_selectYourFromEmailAccount" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="list_availableTime" />
      <Variable x:TypeArguments="scg:List(x:String)" Name="list_timezones" />
      <Variable x:TypeArguments="scg:List(x:String)" Default="[new list (of string)]" Name="list_emailSubjects" />
      <Variable x:TypeArguments="scg:List(snm:MailMessage)" Name="list_emails" />
      <Variable x:TypeArguments="sd:DataTable" Name="dt_meetingsTimeGrid" />
      <Variable x:TypeArguments="scg:List(x:String)" Default="[new list (of string)]" Name="list_selectedMeetingTimes" />
    </Sequence.Variables>
    <sap:WorkflowViewStateService.ViewState>
      <scg:Dictionary x:TypeArguments="x:String, x:Object">
        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
        <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
      </scg:Dictionary>
    </sap:WorkflowViewStateService.ViewState>
    <Assign sap2010:Annotation.AnnotationText="Pass config dictionary into object variable to pass in/out of form Container" sap:VirtualizedContainerService.HintSize="1042,112" sap2010:WorkflowViewState.IdRef="Assign_12">
      <Assign.To>
        <OutArgument x:TypeArguments="x:Object">[obj_container]</OutArgument>
      </Assign.To>
      <Assign.Value>
        <InArgument x:TypeArguments="x:Object">[io_dict_Config]</InArgument>
      </Assign.Value>
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
    </Assign>
    <ufa:FormActivity CreateFormActivityFileName="{x:Null}" CreateFormActivityFilePath="{x:Null}" Dismissed="{x:Null}" FormFieldsInputData="{x:Null}" FormFieldsOutputData="{x:Null}" IconPath="{x:Null}" LocalCSSFilePath="{x:Null}" TimeoutInSeconds="{x:Null}" WindowPositionLeft="{x:Null}" WindowPositionTop="{x:Null}" CreateFormId="b774a24c-432c-42e9-a62a-90d64cfef72b" DisableMaximizeButton="False" DisableMinimizeButton="False" DisableSanitize="True" DisplayName="Create Form" FormHeight="950" FormSchema="%[{&quot;tag&quot;:&quot;h2&quot;,&quot;refreshOnChange&quot;:true,&quot;content&quot;:&quot;{{data.logF_BusinessProcessName}}&quot;,&quot;key&quot;:&quot;logF_BusinessProcessName&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Label&quot;,&quot;type&quot;:&quot;label&quot;},{&quot;refreshOnChange&quot;:true,&quot;content&quot;:&quot;{{data.automationDescription}}&quot;,&quot;key&quot;:&quot;automationDescription&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Label&quot;,&quot;type&quot;:&quot;label&quot;},{&quot;label&quot;:&quot;Container&quot;,&quot;key&quot;:&quot;container&quot;,&quot;type&quot;:&quot;container&quot;,&quot;input&quot;:true,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;label&quot;:&quot;Table&quot;,&quot;cellAlignment&quot;:&quot;left&quot;,&quot;key&quot;:&quot;table4&quot;,&quot;type&quot;:&quot;table&quot;,&quot;numRows&quot;:1,&quot;numCols&quot;:18,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;rows&quot;:[[{&quot;components&quot;:[{&quot;label&quot;:&quot;View demo&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;theme&quot;:&quot;secondary&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;viewDemo&quot;,&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:false,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;,&quot;allowMultipleClicksWhileDoBlock&quot;:false,&quot;hideOnChildrenHidden&quot;:false}]},{&quot;components&quot;:[{&quot;label&quot;:&quot;View user guide&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;theme&quot;:&quot;secondary&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;viewUserGuide&quot;,&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);&quot;,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:false,&quot;allowMultipleClicksWhileDoBlock&quot;:false,&quot;hideOnChildrenHidden&quot;:false}]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]}]]},{&quot;title&quot;:&quot;Meeting options&quot;,&quot;collapsible&quot;:false,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;panel1&quot;,&quot;type&quot;:&quot;panel&quot;,&quot;label&quot;:&quot;Panel1&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;columns&quot;:[{&quot;components&quot;:[{&quot;label&quot;:&quot;Provide your email address:&quot;,&quot;labelPosition&quot;:&quot;left-left&quot;,&quot;tableView&quot;:true,&quot;validate&quot;:{&quot;required&quot;:true},&quot;key&quot;:&quot;selectYourEmailAccount&quot;,&quot;type&quot;:&quot;email&quot;,&quot;input&quot;:true,&quot;labelMargin&quot;:1}],&quot;width&quot;:6,&quot;offset&quot;:0,&quot;push&quot;:0,&quot;pull&quot;:0,&quot;size&quot;:&quot;md&quot;,&quot;currentWidth&quot;:6},{&quot;components&quot;:[{&quot;label&quot;:&quot;Retrieve emails&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;tooltip&quot;:&quot;Retrieves the first 25 emails from the account's inbox which you can select email addresses from&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;retrieveEmails&quot;,&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:false,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;,&quot;hideOnChildrenHidden&quot;:false}],&quot;width&quot;:3,&quot;offset&quot;:0,&quot;push&quot;:0,&quot;pull&quot;:0,&quot;size&quot;:&quot;md&quot;,&quot;currentWidth&quot;:3}],&quot;key&quot;:&quot;columns1&quot;,&quot;type&quot;:&quot;columns&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Columns&quot;,&quot;keyModified&quot;:true},{&quot;label&quot;:&quot;emailAddressPanelFlag&quot;,&quot;key&quot;:&quot;emailAddressPanelFlag&quot;,&quot;type&quot;:&quot;hidden&quot;,&quot;input&quot;:true,&quot;tableView&quot;:false},{&quot;title&quot;:&quot;emailAddressPanel&quot;,&quot;collapsible&quot;:false,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;emailAddressPanel&quot;,&quot;conditional&quot;:{&quot;show&quot;:true,&quot;when&quot;:&quot;container.emailAddressPanelFlag&quot;,&quot;eq&quot;:&quot;true&quot;},&quot;type&quot;:&quot;panel&quot;,&quot;label&quot;:&quot;Panel&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;label&quot;:&quot;Select an email&quot;,&quot;widget&quot;:&quot;choicesjs&quot;,&quot;tooltip&quot;:&quot;Select an email to pull email addresses from&quot;,&quot;tableView&quot;:true,&quot;customDefaultValue&quot;:&quot;const updateOnChange = instance.updateOnChange;\r\ninstance.updateOnChange = function(flags, changed) {\r\n    if (flags.modified) {\r\n        instance.emit('dropdownChanged', 'drop');\r\n    }\r\n    return updateOnChange.call(instance, flag, changed);\r\n}&quot;,&quot;key&quot;:&quot;selectedEmailSubject&quot;,&quot;type&quot;:&quot;select&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Attendees' email addresses&quot;,&quot;tooltip&quot;:&quot;Enter all meeting attendees' email addresses separated by a semi-colon&quot;,&quot;tableView&quot;:true,&quot;validate&quot;:{&quot;required&quot;:true,&quot;pattern&quot;:&quot;^[\\W]*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4}[\\W]*;{1}[\\W]*)*([\\w+\\-.%]+@[\\w\\-.]+\\.[A-Za-z]{2,4})[\\W]*$&quot;,&quot;customMessage&quot;:&quot;This is not a semi-colon separated list of emails&quot;},&quot;key&quot;:&quot;attendeeEmailAddresses&quot;,&quot;type&quot;:&quot;textarea&quot;,&quot;rows&quot;:5,&quot;input&quot;:true,&quot;hideOnChildrenHidden&quot;:false}]},{&quot;title&quot;:&quot;timeSelectionPanel&quot;,&quot;collapsible&quot;:false,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;timeSelectionPanel&quot;,&quot;conditional&quot;:{&quot;show&quot;:false,&quot;when&quot;:&quot;container.attendeeEmailAddresses&quot;},&quot;type&quot;:&quot;panel&quot;,&quot;label&quot;:&quot;Panel3&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;label&quot;:&quot;Meeting date and time ranges&quot;,&quot;tooltip&quot;:&quot;Select the date and time ranges to search for potential meeting slots.&quot;,&quot;reorder&quot;:false,&quot;addAnother&quot;:&quot;Add another meeting range&quot;,&quot;addAnotherPosition&quot;:&quot;bottom&quot;,&quot;layoutFixed&quot;:false,&quot;enableRowGroups&quot;:false,&quot;initEmpty&quot;:false,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;meetingTimeRangeGrid&quot;,&quot;type&quot;:&quot;datagrid&quot;,&quot;input&quot;:true,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;label&quot;:&quot;Meeting ranges&quot;,&quot;cellAlignment&quot;:&quot;left&quot;,&quot;dataGridLabel&quot;:true,&quot;key&quot;:&quot;table&quot;,&quot;type&quot;:&quot;table&quot;,&quot;numRows&quot;:2,&quot;numCols&quot;:1,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;rows&quot;:[[{&quot;components&quot;:[{&quot;label&quot;:&quot;Timezone (optional)&quot;,&quot;widget&quot;:&quot;choicesjs&quot;,&quot;tooltip&quot;:&quot;Select a timezone to search times in or leave blank this field blank to use your default timezone.&quot;,&quot;tableView&quot;:true,&quot;data&quot;:{&quot;values&quot;:[{&quot;label&quot;:&quot;Afghanistan Standard Time&quot;,&quot;value&quot;:&quot;Afghanistan Standard Time&quot;},{&quot;label&quot;:&quot;Alaskan Standard Time&quot;,&quot;value&quot;:&quot;Alaskan Standard Time&quot;},{&quot;label&quot;:&quot;Aleutian Standard Time&quot;,&quot;value&quot;:&quot;Aleutian Standard Time&quot;},{&quot;label&quot;:&quot;Altai Standard Time&quot;,&quot;value&quot;:&quot;Altai Standard Time&quot;},{&quot;label&quot;:&quot;Arab Standard Time&quot;,&quot;value&quot;:&quot;Arab Standard Time&quot;},{&quot;label&quot;:&quot;Arabian Standard Time&quot;,&quot;value&quot;:&quot;Arabian Standard Time&quot;},{&quot;label&quot;:&quot;Arabic Standard Time&quot;,&quot;value&quot;:&quot;Arabic Standard Time&quot;},{&quot;label&quot;:&quot;Argentina Standard Time&quot;,&quot;value&quot;:&quot;Argentina Standard Time&quot;},{&quot;label&quot;:&quot;Astrakhan Standard Time&quot;,&quot;value&quot;:&quot;Astrakhan Standard Time&quot;},{&quot;label&quot;:&quot;Atlantic Standard Time&quot;,&quot;value&quot;:&quot;Atlantic Standard Time&quot;},{&quot;label&quot;:&quot;AUS Central Standard Time&quot;,&quot;value&quot;:&quot;AUS Central Standard Time&quot;},{&quot;label&quot;:&quot;Aus Central W. Standard Time&quot;,&quot;value&quot;:&quot;Aus Central W. Standard Time&quot;},{&quot;label&quot;:&quot;AUS Eastern Standard Time&quot;,&quot;value&quot;:&quot;AUS Eastern Standard Time&quot;},{&quot;label&quot;:&quot;Azerbaijan Standard Time&quot;,&quot;value&quot;:&quot;Azerbaijan Standard Time&quot;},{&quot;label&quot;:&quot;Azores Standard Time&quot;,&quot;value&quot;:&quot;Azores Standard Time&quot;},{&quot;label&quot;:&quot;Bahia Standard Time&quot;,&quot;value&quot;:&quot;Bahia Standard Time&quot;},{&quot;label&quot;:&quot;Bangladesh Standard Time&quot;,&quot;value&quot;:&quot;Bangladesh Standard Time&quot;},{&quot;label&quot;:&quot;Belarus Standard Time&quot;,&quot;value&quot;:&quot;Belarus Standard Time&quot;},{&quot;label&quot;:&quot;Bougainville Standard Time&quot;,&quot;value&quot;:&quot;Bougainville Standard Time&quot;},{&quot;label&quot;:&quot;Cape Verde Standard Time&quot;,&quot;value&quot;:&quot;Cape Verde Standard Time&quot;},{&quot;label&quot;:&quot;Canada Central Standard Time&quot;,&quot;value&quot;:&quot;Canada Central Standard Time&quot;},{&quot;label&quot;:&quot;Caucasus Standard Time&quot;,&quot;value&quot;:&quot;Caucasus Standard Time&quot;},{&quot;label&quot;:&quot;Cen. Australia Standard Time&quot;,&quot;value&quot;:&quot;Cen. Australia Standard Time&quot;},{&quot;label&quot;:&quot;Central America Standard Time&quot;,&quot;value&quot;:&quot;Central America Standard Time&quot;},{&quot;label&quot;:&quot;Central Asia Standard Time&quot;,&quot;value&quot;:&quot;Central Asia Standard Time&quot;},{&quot;label&quot;:&quot;Central Brazilian Standard Time&quot;,&quot;value&quot;:&quot;Central Brazilian Standard Time&quot;},{&quot;label&quot;:&quot;Central Europe Standard Time&quot;,&quot;value&quot;:&quot;Central Europe Standard Time&quot;},{&quot;label&quot;:&quot;Central European Standard Time&quot;,&quot;value&quot;:&quot;Central European Standard Time&quot;},{&quot;label&quot;:&quot;Central Pacific Standard Time&quot;,&quot;value&quot;:&quot;Central Pacific Standard Time&quot;},{&quot;label&quot;:&quot;Central Standard Time&quot;,&quot;value&quot;:&quot;Central Standard Time&quot;},{&quot;label&quot;:&quot;Mexico Central Standard Time Mexico&quot;,&quot;value&quot;:&quot;Mexico Central Standard Time Mexico&quot;},{&quot;label&quot;:&quot;Chatham Islands Standard Time&quot;,&quot;value&quot;:&quot;Chatham Islands Standard Time&quot;},{&quot;label&quot;:&quot;China Standard Time&quot;,&quot;value&quot;:&quot;China Standard Time&quot;},{&quot;label&quot;:&quot;UTC&quot;,&quot;value&quot;:&quot;UTC&quot;},{&quot;label&quot;:&quot;Cuba Standard Time&quot;,&quot;value&quot;:&quot;Cuba Standard Time&quot;},{&quot;label&quot;:&quot;Dateline Standard Time&quot;,&quot;value&quot;:&quot;Dateline Standard Time&quot;},{&quot;label&quot;:&quot;E. Africa Standard Time&quot;,&quot;value&quot;:&quot;E. Africa Standard Time&quot;},{&quot;label&quot;:&quot;E. Australia Standard Time&quot;,&quot;value&quot;:&quot;E. Australia Standard Time&quot;},{&quot;label&quot;:&quot;E. Europe Standard Time&quot;,&quot;value&quot;:&quot;E. Europe Standard Time&quot;},{&quot;label&quot;:&quot;E. South America Standard Time&quot;,&quot;value&quot;:&quot;E. South America Standard Time&quot;},{&quot;label&quot;:&quot;Easter Island Standard Time&quot;,&quot;value&quot;:&quot;Easter Island Standard Time&quot;},{&quot;label&quot;:&quot;Eastern Standard Time&quot;,&quot;value&quot;:&quot;Eastern Standard Time&quot;},{&quot;label&quot;:&quot;Mexico Eastern Standard Time Mexico&quot;,&quot;value&quot;:&quot;Mexico Eastern Standard Time Mexico&quot;},{&quot;label&quot;:&quot;Egypt Standard Time&quot;,&quot;value&quot;:&quot;Egypt Standard Time&quot;},{&quot;label&quot;:&quot;Fiji Standard Time&quot;,&quot;value&quot;:&quot;Fiji Standard Time&quot;},{&quot;label&quot;:&quot;FLE Standard Time&quot;,&quot;value&quot;:&quot;FLE Standard Time&quot;},{&quot;label&quot;:&quot;Georgian Standard Time&quot;,&quot;value&quot;:&quot;Georgian Standard Time&quot;},{&quot;label&quot;:&quot;GMT Standard Time&quot;,&quot;value&quot;:&quot;GMT Standard Time&quot;},{&quot;label&quot;:&quot;Greenland Standard Time&quot;,&quot;value&quot;:&quot;Greenland Standard Time&quot;},{&quot;label&quot;:&quot;Greenwich Standard Time&quot;,&quot;value&quot;:&quot;Greenwich Standard Time&quot;},{&quot;label&quot;:&quot;GTB Standard Time&quot;,&quot;value&quot;:&quot;GTB Standard Time&quot;},{&quot;label&quot;:&quot;Haiti Standard Time&quot;,&quot;value&quot;:&quot;Haiti Standard Time&quot;},{&quot;label&quot;:&quot;Hawaiian Standard Time&quot;,&quot;value&quot;:&quot;Hawaiian Standard Time&quot;},{&quot;label&quot;:&quot;India Standard Time&quot;,&quot;value&quot;:&quot;India Standard Time&quot;},{&quot;label&quot;:&quot;Iran Standard Time&quot;,&quot;value&quot;:&quot;Iran Standard Time&quot;},{&quot;label&quot;:&quot;Israel Standard Time&quot;,&quot;value&quot;:&quot;Israel Standard Time&quot;},{&quot;label&quot;:&quot;Jordan Standard Time&quot;,&quot;value&quot;:&quot;Jordan Standard Time&quot;},{&quot;label&quot;:&quot;Kamchatka Standard Time&quot;,&quot;value&quot;:&quot;Kamchatka Standard Time&quot;},{&quot;label&quot;:&quot;Korea Standard Time&quot;,&quot;value&quot;:&quot;Korea Standard Time&quot;},{&quot;label&quot;:&quot;Libya Standard Time&quot;,&quot;value&quot;:&quot;Libya Standard Time&quot;},{&quot;label&quot;:&quot;Line Islands Standard Time&quot;,&quot;value&quot;:&quot;Line Islands Standard Time&quot;},{&quot;label&quot;:&quot;Lord Howe Standard Time&quot;,&quot;value&quot;:&quot;Lord Howe Standard Time&quot;},{&quot;label&quot;:&quot;Magadan Standard Time&quot;,&quot;value&quot;:&quot;Magadan Standard Time&quot;},{&quot;label&quot;:&quot;Magallanes Standard Time&quot;,&quot;value&quot;:&quot;Magallanes Standard Time&quot;},{&quot;label&quot;:&quot;Singapore Standard Time&quot;,&quot;value&quot;:&quot;Singapore Standard Time&quot;},{&quot;label&quot;:&quot;Marquesas Standard Time&quot;,&quot;value&quot;:&quot;Marquesas Standard Time&quot;},{&quot;label&quot;:&quot;Mauritius Standard Time&quot;,&quot;value&quot;:&quot;Mauritius Standard Time&quot;},{&quot;label&quot;:&quot;Mid-Atlantic Standard Time&quot;,&quot;value&quot;:&quot;Mid-Atlantic Standard Time&quot;},{&quot;label&quot;:&quot;Middle East Standard Time&quot;,&quot;value&quot;:&quot;Middle East Standard Time&quot;},{&quot;label&quot;:&quot;Montevideo Standard Time&quot;,&quot;value&quot;:&quot;Montevideo Standard Time&quot;},{&quot;label&quot;:&quot;Morocco Standard Time&quot;,&quot;value&quot;:&quot;Morocco Standard Time&quot;},{&quot;label&quot;:&quot;Mexico Mountain Standard Time Mexico&quot;,&quot;value&quot;:&quot;Mexico Mountain Standard Time Mexico&quot;},{&quot;label&quot;:&quot;Mountain Standard Time&quot;,&quot;value&quot;:&quot;Mountain Standard Time&quot;},{&quot;label&quot;:&quot;Myanmar Standard Time&quot;,&quot;value&quot;:&quot;Myanmar Standard Time&quot;},{&quot;label&quot;:&quot;Namibia Standard Time&quot;,&quot;value&quot;:&quot;Namibia Standard Time&quot;},{&quot;label&quot;:&quot;Nepal Standard Time&quot;,&quot;value&quot;:&quot;Nepal Standard Time&quot;},{&quot;label&quot;:&quot;New Zealand Standard Time&quot;,&quot;value&quot;:&quot;New Zealand Standard Time&quot;},{&quot;label&quot;:&quot;Newfoundland Standard Time&quot;,&quot;value&quot;:&quot;Newfoundland Standard Time&quot;},{&quot;label&quot;:&quot;Norfolk Standard Time&quot;,&quot;value&quot;:&quot;Norfolk Standard Time&quot;},{&quot;label&quot;:&quot;North Korea Standard Time&quot;,&quot;value&quot;:&quot;North Korea Standard Time&quot;},{&quot;label&quot;:&quot;N. Central Asia Standard Time&quot;,&quot;value&quot;:&quot;N. Central Asia Standard Time&quot;},{&quot;label&quot;:&quot;Omsk Standard Time&quot;,&quot;value&quot;:&quot;Omsk Standard Time&quot;},{&quot;label&quot;:&quot;Pacific SA Standard Time&quot;,&quot;value&quot;:&quot;Pacific SA Standard Time&quot;},{&quot;label&quot;:&quot;Mexico Pacific Standard Time Mexico&quot;,&quot;value&quot;:&quot;Mexico Pacific Standard Time Mexico&quot;},{&quot;label&quot;:&quot;Pacific Standard Time&quot;,&quot;value&quot;:&quot;Pacific Standard Time&quot;},{&quot;label&quot;:&quot;Pakistan Standard Time&quot;,&quot;value&quot;:&quot;Pakistan Standard Time&quot;},{&quot;label&quot;:&quot;Paraguay Standard Time&quot;,&quot;value&quot;:&quot;Paraguay Standard Time&quot;},{&quot;label&quot;:&quot;Qyzylorda Standard Time&quot;,&quot;value&quot;:&quot;Qyzylorda Standard Time&quot;},{&quot;label&quot;:&quot;Romance Standard Time&quot;,&quot;value&quot;:&quot;Romance Standard Time&quot;},{&quot;label&quot;:&quot;Kaliningrad Standard Time&quot;,&quot;value&quot;:&quot;Kaliningrad Standard Time&quot;},{&quot;label&quot;:&quot;Russia Time Zone 10&quot;,&quot;value&quot;:&quot;Russia Time Zone 10&quot;},{&quot;label&quot;:&quot;Russia Time Zone 11&quot;,&quot;value&quot;:&quot;Russia Time Zone 11&quot;},{&quot;label&quot;:&quot;Russian Standard Time&quot;,&quot;value&quot;:&quot;Russian Standard Time&quot;},{&quot;label&quot;:&quot;Russia Time Zone 3&quot;,&quot;value&quot;:&quot;Russia Time Zone 3&quot;},{&quot;label&quot;:&quot;Ekaterinburg Standard Time&quot;,&quot;value&quot;:&quot;Ekaterinburg Standard Time&quot;},{&quot;label&quot;:&quot;North Asia Standard Time&quot;,&quot;value&quot;:&quot;North Asia Standard Time&quot;},{&quot;label&quot;:&quot;North Asia East Standard Time&quot;,&quot;value&quot;:&quot;North Asia East Standard Time&quot;},{&quot;label&quot;:&quot;Yakutsk Standard Time&quot;,&quot;value&quot;:&quot;Yakutsk Standard Time&quot;},{&quot;label&quot;:&quot;Vladivostok Standard Time&quot;,&quot;value&quot;:&quot;Vladivostok Standard Time&quot;},{&quot;label&quot;:&quot;SA Eastern Standard Time&quot;,&quot;value&quot;:&quot;SA Eastern Standard Time&quot;},{&quot;label&quot;:&quot;SA Pacific Standard Time&quot;,&quot;value&quot;:&quot;SA Pacific Standard Time&quot;},{&quot;label&quot;:&quot;SA Western Standard Time&quot;,&quot;value&quot;:&quot;SA Western Standard Time&quot;},{&quot;label&quot;:&quot;Saint Pierre Standard Time&quot;,&quot;value&quot;:&quot;Saint Pierre Standard Time&quot;},{&quot;label&quot;:&quot;Sakhalin Standard Time&quot;,&quot;value&quot;:&quot;Sakhalin Standard Time&quot;},{&quot;label&quot;:&quot;Samoa Standard Time&quot;,&quot;value&quot;:&quot;Samoa Standard Time&quot;},{&quot;label&quot;:&quot;Sao Tome Standard Time&quot;,&quot;value&quot;:&quot;Sao Tome Standard Time&quot;},{&quot;label&quot;:&quot;Saratov Standard Time&quot;,&quot;value&quot;:&quot;Saratov Standard Time&quot;},{&quot;label&quot;:&quot;SE Asia Standard Time&quot;,&quot;value&quot;:&quot;SE Asia Standard Time&quot;},{&quot;label&quot;:&quot;South Africa Standard Time&quot;,&quot;value&quot;:&quot;South Africa Standard Time&quot;},{&quot;label&quot;:&quot;South Sudan Standard Time&quot;,&quot;value&quot;:&quot;South Sudan Standard Time&quot;},{&quot;label&quot;:&quot;Sri Lanka Standard Time&quot;,&quot;value&quot;:&quot;Sri Lanka Standard Time&quot;},{&quot;label&quot;:&quot;Sudan Standard Time&quot;,&quot;value&quot;:&quot;Sudan Standard Time&quot;},{&quot;label&quot;:&quot;Syria Standard Time&quot;,&quot;value&quot;:&quot;Syria Standard Time&quot;},{&quot;label&quot;:&quot;Taipei Standard Time&quot;,&quot;value&quot;:&quot;Taipei Standard Time&quot;},{&quot;label&quot;:&quot;Tasmania Standard Time&quot;,&quot;value&quot;:&quot;Tasmania Standard Time&quot;},{&quot;label&quot;:&quot;Tocantins Standard Time&quot;,&quot;value&quot;:&quot;Tocantins Standard Time&quot;},{&quot;label&quot;:&quot;Tokyo Standard Time&quot;,&quot;value&quot;:&quot;Tokyo Standard Time&quot;},{&quot;label&quot;:&quot;Tomsk Standard Time&quot;,&quot;value&quot;:&quot;Tomsk Standard Time&quot;},{&quot;label&quot;:&quot;Tonga Standard Time&quot;,&quot;value&quot;:&quot;Tonga Standard Time&quot;},{&quot;label&quot;:&quot;Transbaikal Standard Time&quot;,&quot;value&quot;:&quot;Transbaikal Standard Time&quot;},{&quot;label&quot;:&quot;Turkey Standard Time&quot;,&quot;value&quot;:&quot;Turkey Standard Time&quot;},{&quot;label&quot;:&quot;Turks And Caicos Standard Time&quot;,&quot;value&quot;:&quot;Turks And Caicos Standard Time&quot;},{&quot;label&quot;:&quot;Ulaanbaatar Standard Time&quot;,&quot;value&quot;:&quot;Ulaanbaatar Standard Time&quot;},{&quot;label&quot;:&quot;US Eastern Standard Time&quot;,&quot;value&quot;:&quot;US Eastern Standard Time&quot;},{&quot;label&quot;:&quot;US Mountain Standard Time&quot;,&quot;value&quot;:&quot;US Mountain Standard Time&quot;},{&quot;label&quot;:&quot;UTC+12&quot;,&quot;value&quot;:&quot;UTC+12&quot;},{&quot;label&quot;:&quot;UTC+13&quot;,&quot;value&quot;:&quot;UTC+13&quot;},{&quot;label&quot;:&quot;UTC-02&quot;,&quot;value&quot;:&quot;UTC-02&quot;},{&quot;label&quot;:&quot;UTC-08&quot;,&quot;value&quot;:&quot;UTC-08&quot;},{&quot;label&quot;:&quot;UTC-09&quot;,&quot;value&quot;:&quot;UTC-09&quot;},{&quot;label&quot;:&quot;UTC-11&quot;,&quot;value&quot;:&quot;UTC-11&quot;},{&quot;label&quot;:&quot;Venezuela Standard Time&quot;,&quot;value&quot;:&quot;Venezuela Standard Time&quot;},{&quot;label&quot;:&quot;Volgograd Standard Time&quot;,&quot;value&quot;:&quot;Volgograd Standard Time&quot;},{&quot;label&quot;:&quot;W. Australia Standard Time&quot;,&quot;value&quot;:&quot;W. Australia Standard Time&quot;},{&quot;label&quot;:&quot;W. Central Africa Standard Time&quot;,&quot;value&quot;:&quot;W. Central Africa Standard Time&quot;},{&quot;label&quot;:&quot;W. Europe Standard Time&quot;,&quot;value&quot;:&quot;W. Europe Standard Time&quot;},{&quot;label&quot;:&quot;W. Mongolia Standard Time&quot;,&quot;value&quot;:&quot;W. Mongolia Standard Time&quot;},{&quot;label&quot;:&quot;West Asia Standard Time&quot;,&quot;value&quot;:&quot;West Asia Standard Time&quot;},{&quot;label&quot;:&quot;West Bank Standard Time&quot;,&quot;value&quot;:&quot;West Bank Standard Time&quot;},{&quot;label&quot;:&quot;West Pacific Standard Time&quot;,&quot;value&quot;:&quot;West Pacific Standard Time&quot;},{&quot;label&quot;:&quot;Yukon Standard Time&quot;,&quot;value&quot;:&quot;Yukon Standard Time&quot;}]},&quot;key&quot;:&quot;timezone&quot;,&quot;type&quot;:&quot;select&quot;,&quot;input&quot;:true,&quot;hideOnChildrenHidden&quot;:false,&quot;keyModified&quot;:true}]}],[{&quot;components&quot;:[{&quot;columns&quot;:[{&quot;components&quot;:[{&quot;label&quot;:&quot;Start Date &amp; Time&quot;,&quot;tooltip&quot;:&quot;Must be before the beginning date and time&quot;,&quot;tableView&quot;:true,&quot;enableMinDateInput&quot;:false,&quot;datePicker&quot;:{&quot;disableWeekends&quot;:false,&quot;disableWeekdays&quot;:false},&quot;enableMaxDateInput&quot;:false,&quot;validate&quot;:{&quot;required&quot;:true},&quot;key&quot;:&quot;meetingStart&quot;,&quot;type&quot;:&quot;datetime&quot;,&quot;input&quot;:true,&quot;suffix&quot;:&quot;&lt;i ref=\&quot;icon\&quot; class=\&quot;fa fa-calendar\&quot; style=\&quot;\&quot;&gt;&lt;/i&gt;&quot;,&quot;widget&quot;:{&quot;type&quot;:&quot;calendar&quot;,&quot;displayInTimezone&quot;:&quot;viewer&quot;,&quot;locale&quot;:&quot;en&quot;,&quot;useLocaleSettings&quot;:false,&quot;allowInput&quot;:true,&quot;mode&quot;:&quot;single&quot;,&quot;enableTime&quot;:true,&quot;noCalendar&quot;:false,&quot;format&quot;:&quot;yyyy-MM-dd hh:mm a&quot;,&quot;hourIncrement&quot;:1,&quot;minuteIncrement&quot;:1,&quot;time_24hr&quot;:false,&quot;minDate&quot;:null,&quot;disableWeekends&quot;:false,&quot;disableWeekdays&quot;:false,&quot;maxDate&quot;:null},&quot;hideOnChildrenHidden&quot;:false}],&quot;width&quot;:5,&quot;offset&quot;:0,&quot;push&quot;:0,&quot;pull&quot;:0,&quot;size&quot;:&quot;xs&quot;,&quot;currentWidth&quot;:5},{&quot;components&quot;:[{&quot;label&quot;:&quot;End Date &amp; Time&quot;,&quot;tooltip&quot;:&quot;Must be after the beginning date and time&quot;,&quot;tableView&quot;:true,&quot;enableMinDateInput&quot;:false,&quot;datePicker&quot;:{&quot;disableWeekends&quot;:false,&quot;disableWeekdays&quot;:false},&quot;enableMaxDateInput&quot;:false,&quot;validate&quot;:{&quot;required&quot;:true},&quot;key&quot;:&quot;meetingEnd&quot;,&quot;type&quot;:&quot;datetime&quot;,&quot;input&quot;:true,&quot;suffix&quot;:&quot;&lt;i ref=\&quot;icon\&quot; class=\&quot;fa fa-calendar\&quot; style=\&quot;\&quot;&gt;&lt;/i&gt;&quot;,&quot;widget&quot;:{&quot;type&quot;:&quot;calendar&quot;,&quot;displayInTimezone&quot;:&quot;viewer&quot;,&quot;locale&quot;:&quot;en&quot;,&quot;useLocaleSettings&quot;:false,&quot;allowInput&quot;:true,&quot;mode&quot;:&quot;single&quot;,&quot;enableTime&quot;:true,&quot;noCalendar&quot;:false,&quot;format&quot;:&quot;yyyy-MM-dd hh:mm a&quot;,&quot;hourIncrement&quot;:1,&quot;minuteIncrement&quot;:1,&quot;time_24hr&quot;:false,&quot;minDate&quot;:null,&quot;disableWeekends&quot;:false,&quot;disableWeekdays&quot;:false,&quot;maxDate&quot;:null},&quot;hideOnChildrenHidden&quot;:false}],&quot;width&quot;:5,&quot;offset&quot;:0,&quot;push&quot;:0,&quot;pull&quot;:0,&quot;size&quot;:&quot;xs&quot;,&quot;currentWidth&quot;:5},{&quot;components&quot;:[{&quot;label&quot;:&quot;Duration&quot;,&quot;placeholder&quot;:&quot;minutes&quot;,&quot;tooltip&quot;:&quot;in minutes&quot;,&quot;tableView&quot;:false,&quot;delimiter&quot;:false,&quot;requireDecimal&quot;:false,&quot;validate&quot;:{&quot;required&quot;:true},&quot;key&quot;:&quot;duration&quot;,&quot;type&quot;:&quot;number&quot;,&quot;decimalLimit&quot;:0,&quot;input&quot;:true,&quot;hideOnChildrenHidden&quot;:false}],&quot;size&quot;:&quot;md&quot;,&quot;width&quot;:2,&quot;offset&quot;:0,&quot;push&quot;:0,&quot;pull&quot;:0,&quot;currentWidth&quot;:2}],&quot;key&quot;:&quot;columns&quot;,&quot;type&quot;:&quot;columns&quot;,&quot;dataGridLabel&quot;:true,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Meeting date and time range&quot;}]}]]}]},{&quot;label&quot;:&quot;Table&quot;,&quot;cellAlignment&quot;:&quot;right&quot;,&quot;key&quot;:&quot;table5&quot;,&quot;type&quot;:&quot;table&quot;,&quot;numRows&quot;:1,&quot;numCols&quot;:8,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;rows&quot;:[[{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Get availability&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;tooltip&quot;:&quot;Get available meeting times for internal attendees&quot;,&quot;disableOnInvalid&quot;:true,&quot;tableView&quot;:false,&quot;key&quot;:&quot;getAvailability&quot;,&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);\r\n\r\nvar panel1 = form.getComponent('panel1');\r\npanel1.collapsible = false;\r\npanel1.collapsed = true;\r\nvar panel2 = form.getComponent('panel2');\r\npanel2.collapsed = false;&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:true,&quot;type&quot;:&quot;button&quot;,&quot;input&quot;:true,&quot;hideOnChildrenHidden&quot;:false}]}]]}]}]},{&quot;title&quot;:&quot;Potential meeting times&quot;,&quot;collapsible&quot;:false,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;panel2&quot;,&quot;type&quot;:&quot;panel&quot;,&quot;label&quot;:&quot;Panel&quot;,&quot;collapsed&quot;:true,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;tag&quot;:&quot;h3&quot;,&quot;refreshOnChange&quot;:true,&quot;content&quot;:&quot;Potential meeting times&quot;,&quot;key&quot;:&quot;label1&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Label&quot;,&quot;type&quot;:&quot;label&quot;},{&quot;label&quot;:&quot;Meeting times&quot;,&quot;disableAddingRemovingRows&quot;:true,&quot;reorder&quot;:false,&quot;addAnotherPosition&quot;:&quot;bottom&quot;,&quot;layoutFixed&quot;:false,&quot;enableRowGroups&quot;:false,&quot;initEmpty&quot;:false,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;potentialMeetingTimesGrid&quot;,&quot;type&quot;:&quot;datagrid&quot;,&quot;input&quot;:true,&quot;tableView&quot;:true,&quot;components&quot;:[{&quot;label&quot;:&quot;Date&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;key&quot;:&quot;meetingDate&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Start time&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;key&quot;:&quot;meetingStart&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;End time&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;key&quot;:&quot;meetingEnd&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Timezone&quot;,&quot;disabled&quot;:true,&quot;tableView&quot;:true,&quot;key&quot;:&quot;suggestedTimezone&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Propose&quot;,&quot;tableView&quot;:false,&quot;defaultValue&quot;:false,&quot;key&quot;:&quot;propose&quot;,&quot;type&quot;:&quot;checkbox&quot;,&quot;input&quot;:true}],&quot;keyModified&quot;:true,&quot;clearOnHide&quot;:false},{&quot;label&quot;:&quot;Table&quot;,&quot;cellAlignment&quot;:&quot;right&quot;,&quot;key&quot;:&quot;table3&quot;,&quot;type&quot;:&quot;table&quot;,&quot;numRows&quot;:1,&quot;numCols&quot;:8,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;rows&quot;:[[{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Back&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;theme&quot;:&quot;info&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;panel2Back&quot;,&quot;custom&quot;:&quot;var panel1 = form.getComponent('panel1');\npanel1.collapsed = false;\n\nvar panel2 = form.getComponent('panel2');\npanel2.collapsible = false;\npanel2.collapsed = true;&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:true,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;}]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Confirm selection&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;disableOnInvalid&quot;:true,&quot;tableView&quot;:false,&quot;key&quot;:&quot;confirmSelection&quot;,&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);\r\n\r\nvar panel2 = form.getComponent('panel2');\r\npanel2.collapsible = false;\r\npanel2.collapsed = true;\r\n\r\nvar panel3;\r\nvar attendeeFlag = form.getComponent('attendeeType');\r\nvar attendeeType = attendeeFlag.getValue();\r\nif (attendeeType === 'internal') {\r\n  panel3 = form.getComponent('panel3Internal');\r\n} else {\r\n  panel3 = form.getComponent('panel3External');\r\n}\r\n  panel3.component.hidden = false;\r\n  panel3.collapsed = false;&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:true,&quot;type&quot;:&quot;button&quot;,&quot;input&quot;:true,&quot;hideOnChildrenHidden&quot;:false}]}]]}],&quot;keyModified&quot;:true},{&quot;label&quot;:&quot;attendeeType&quot;,&quot;key&quot;:&quot;attendeeType&quot;,&quot;type&quot;:&quot;hidden&quot;,&quot;input&quot;:true,&quot;tableView&quot;:false},{&quot;title&quot;:&quot;Schedule meeting&quot;,&quot;collapsible&quot;:false,&quot;hidden&quot;:true,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;panel3Internal&quot;,&quot;type&quot;:&quot;panel&quot;,&quot;label&quot;:&quot;Panel5&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;tag&quot;:&quot;h3&quot;,&quot;refreshOnChange&quot;:true,&quot;content&quot;:&quot;Schedule meeting&quot;,&quot;key&quot;:&quot;label2&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Label&quot;,&quot;type&quot;:&quot;label&quot;},{&quot;label&quot;:&quot;Select Meeting Time&quot;,&quot;widget&quot;:&quot;choicesjs&quot;,&quot;tableView&quot;:true,&quot;key&quot;:&quot;internalSelectedMeetingTime&quot;,&quot;type&quot;:&quot;select&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Meeting Title&quot;,&quot;placeholder&quot;:&quot;Meeting for internal colleagues&quot;,&quot;tooltip&quot;:&quot;Please enter the title for your meeting&quot;,&quot;tableView&quot;:true,&quot;key&quot;:&quot;internalMeetingTitle&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Meeting Description&quot;,&quot;placeholder&quot;:&quot;Please join me for this meeting&quot;,&quot;tooltip&quot;:&quot;Please enter the description for your meeting&quot;,&quot;tableView&quot;:true,&quot;key&quot;:&quot;internalMeetingDescription&quot;,&quot;type&quot;:&quot;textarea&quot;,&quot;rows&quot;:10,&quot;input&quot;:true},{&quot;label&quot;:&quot;Table&quot;,&quot;cellAlignment&quot;:&quot;right&quot;,&quot;key&quot;:&quot;table1&quot;,&quot;type&quot;:&quot;table&quot;,&quot;numRows&quot;:1,&quot;numCols&quot;:8,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;rows&quot;:[[{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Back&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;theme&quot;:&quot;info&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;panel3InternalBack&quot;,&quot;custom&quot;:&quot;var panel3 = form.getComponent('panel3Internal');\npanel3.collapsible = false;\npanel3.collapsed = true;\n\nvar panel2 = form.getComponent('panel2');\npanel2.collapsed = false;&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:true,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;}]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Schedule meeting&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;internalScheduleMeeting&quot;,&quot;logic&quot;:[{&quot;name&quot;:&quot;Disable on empty meeting title&quot;,&quot;trigger&quot;:{&quot;type&quot;:&quot;simple&quot;,&quot;simple&quot;:{&quot;show&quot;:true,&quot;when&quot;:&quot;container.internalMeetingTitle&quot;,&quot;eq&quot;:&quot;&quot;}},&quot;actions&quot;:[{&quot;name&quot;:&quot;Disable&quot;,&quot;type&quot;:&quot;property&quot;,&quot;property&quot;:{&quot;label&quot;:&quot;Disabled&quot;,&quot;value&quot;:&quot;disabled&quot;,&quot;type&quot;:&quot;boolean&quot;},&quot;state&quot;:true}]},{&quot;name&quot;:&quot;Disable on empty meeting description&quot;,&quot;trigger&quot;:{&quot;type&quot;:&quot;simple&quot;,&quot;simple&quot;:{&quot;show&quot;:true,&quot;when&quot;:&quot;container.internalMeetingDescription&quot;,&quot;eq&quot;:&quot;&quot;}},&quot;actions&quot;:[{&quot;name&quot;:&quot;Disable&quot;,&quot;type&quot;:&quot;property&quot;,&quot;property&quot;:{&quot;label&quot;:&quot;Disabled&quot;,&quot;value&quot;:&quot;disabled&quot;,&quot;type&quot;:&quot;boolean&quot;},&quot;state&quot;:true}]},{&quot;name&quot;:&quot;Disable on empty meeting selection&quot;,&quot;trigger&quot;:{&quot;type&quot;:&quot;simple&quot;,&quot;simple&quot;:{&quot;show&quot;:true,&quot;when&quot;:&quot;container.internalSelectedMeetingTime&quot;,&quot;eq&quot;:&quot;&quot;}},&quot;actions&quot;:[{&quot;name&quot;:&quot;Disable&quot;,&quot;type&quot;:&quot;property&quot;,&quot;property&quot;:{&quot;label&quot;:&quot;Disabled&quot;,&quot;value&quot;:&quot;disabled&quot;,&quot;type&quot;:&quot;boolean&quot;},&quot;state&quot;:true}]}],&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);&quot;,&quot;isResetData&quot;:false,&quot;saveOnEnter&quot;:false,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;}]}]]}]},{&quot;title&quot;:&quot;Email availability&quot;,&quot;collapsible&quot;:false,&quot;hidden&quot;:true,&quot;hideLabel&quot;:true,&quot;key&quot;:&quot;panel3External&quot;,&quot;type&quot;:&quot;panel&quot;,&quot;label&quot;:&quot;Panel4&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;components&quot;:[{&quot;tag&quot;:&quot;h3&quot;,&quot;refreshOnChange&quot;:true,&quot;content&quot;:&quot;Email meeting availability&quot;,&quot;key&quot;:&quot;label3&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Label&quot;,&quot;type&quot;:&quot;label&quot;},{&quot;refreshOnChange&quot;:true,&quot;content&quot;:&quot;{{data.preparingEmailLabel}}&quot;,&quot;key&quot;:&quot;preparingEmailLabel&quot;,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;label&quot;:&quot;Label&quot;,&quot;type&quot;:&quot;label&quot;},{&quot;label&quot;:&quot;Email Subject&quot;,&quot;placeholder&quot;:&quot;Potential meeting times&quot;,&quot;tooltip&quot;:&quot;Please enter the subject for your email&quot;,&quot;tableView&quot;:true,&quot;key&quot;:&quot;externalEmailSubject&quot;,&quot;type&quot;:&quot;textfield&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Email Body&quot;,&quot;placeholder&quot;:&quot;Hi, do any of these times work for you?&quot;,&quot;tooltip&quot;:&quot;Please enter the body of your email&quot;,&quot;tableView&quot;:true,&quot;key&quot;:&quot;externalEmailBody&quot;,&quot;type&quot;:&quot;textarea&quot;,&quot;rows&quot;:10,&quot;input&quot;:true},{&quot;label&quot;:&quot;Create calendar blocks for internal attendees&quot;,&quot;tooltip&quot;:&quot;Use this option to send calendar blocks to internal attendees only. &quot;,&quot;tableView&quot;:false,&quot;defaultValue&quot;:false,&quot;key&quot;:&quot;externalCreateInternalCalendarBlocks&quot;,&quot;type&quot;:&quot;checkbox&quot;,&quot;input&quot;:true},{&quot;label&quot;:&quot;Table&quot;,&quot;cellAlignment&quot;:&quot;right&quot;,&quot;key&quot;:&quot;table2&quot;,&quot;type&quot;:&quot;table&quot;,&quot;numRows&quot;:1,&quot;numCols&quot;:8,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;rows&quot;:[[{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Back&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;theme&quot;:&quot;info&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;panel3ExternalBack&quot;,&quot;custom&quot;:&quot;var panel3 = form.getComponent('panel3External');\npanel3.collapsible = false;\npanel3.collapsed = true;\n\nvar panel2 = form.getComponent('panel2');\npanel2.collapsed = false;&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:true,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;}]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Send Email&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;externalSendEmail&quot;,&quot;logic&quot;:[{&quot;name&quot;:&quot;Disable on empty email subject&quot;,&quot;trigger&quot;:{&quot;type&quot;:&quot;simple&quot;,&quot;simple&quot;:{&quot;show&quot;:true,&quot;when&quot;:&quot;container.externalEmailSubject&quot;,&quot;eq&quot;:&quot;&quot;}},&quot;actions&quot;:[{&quot;name&quot;:&quot;Disable&quot;,&quot;type&quot;:&quot;property&quot;,&quot;property&quot;:{&quot;label&quot;:&quot;Disabled&quot;,&quot;value&quot;:&quot;disabled&quot;,&quot;type&quot;:&quot;boolean&quot;},&quot;state&quot;:true}]},{&quot;name&quot;:&quot;Disable on empty email body&quot;,&quot;trigger&quot;:{&quot;type&quot;:&quot;simple&quot;,&quot;simple&quot;:{&quot;show&quot;:true,&quot;when&quot;:&quot;container.externalEmailBody&quot;,&quot;eq&quot;:&quot;&quot;}},&quot;actions&quot;:[{&quot;name&quot;:&quot;Disable&quot;,&quot;type&quot;:&quot;property&quot;,&quot;property&quot;:{&quot;label&quot;:&quot;Disabled&quot;,&quot;value&quot;:&quot;disabled&quot;,&quot;type&quot;:&quot;boolean&quot;},&quot;state&quot;:true}]}],&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);&quot;,&quot;isResetData&quot;:false,&quot;saveOnEnter&quot;:false,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;},{&quot;label&quot;:&quot;Draft only&quot;,&quot;tooltip&quot;:&quot;Create a draft of the email instead of sending it&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;draftOnly&quot;,&quot;type&quot;:&quot;checkbox&quot;,&quot;input&quot;:true,&quot;defaultValue&quot;:true}]}]]}]},{&quot;label&quot;:&quot;Table&quot;,&quot;cellAlignment&quot;:&quot;right&quot;,&quot;key&quot;:&quot;table&quot;,&quot;type&quot;:&quot;table&quot;,&quot;numRows&quot;:1,&quot;numCols&quot;:8,&quot;input&quot;:false,&quot;tableView&quot;:false,&quot;rows&quot;:[[{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[]},{&quot;components&quot;:[{&quot;label&quot;:&quot;Cancel&quot;,&quot;action&quot;:&quot;custom&quot;,&quot;theme&quot;:&quot;secondary&quot;,&quot;tableView&quot;:false,&quot;key&quot;:&quot;cancel&quot;,&quot;properties&quot;:{&quot;closeOnSubmit&quot;:&quot;true&quot;},&quot;custom&quot;:&quot;instance.emit('executeDoBlock', instance.component);&quot;,&quot;isResetData&quot;:false,&quot;showUpdateData&quot;:false,&quot;input&quot;:true,&quot;type&quot;:&quot;button&quot;,&quot;hideOnChildrenHidden&quot;:false}]}]]}]}]" FormTheme="{}{&quot;Activities&quot;:[&quot;FORMS&quot;],&quot;Id&quot;:&quot;100120&quot;,&quot;Name&quot;:&quot;Default&quot;,&quot;BaseCss&quot;:&quot;../../assets/css/themes/uipath.bootstrap.min.css&quot;,&quot;ImageSrc&quot;:&quot;../../assets/themeicons/uipath.png&quot;,&quot;OverrideCssUrl&quot;:&quot;../../assets/css/themes/uipath.custom.css&quot;,&quot;UserStyleOverrides&quot;:&quot;&quot;,&quot;Properties&quot;:&quot;&quot;,&quot;IsCustomTheme&quot;:false,&quot;Version&quot;:1,&quot;ThemeVersion&quot;:1}" FormTitle="UiPath Ready-to-go Automation" FormWidth="1050" GenerateInputFields="False" sap:VirtualizedContainerService.HintSize="1042,1458" sap2010:WorkflowViewState.IdRef="FormActivity_1" IsReadOnly="False" MaxColumnsForSchemaGeneration="6" RunDoBlockFirst="False" RunInIsolatedMode="False" SelectedButton="[str_selectedButton]" StartAsMinimized="False">
      <ufa:FormActivity.Body>
        <ActivityAction x:TypeArguments="scg:Dictionary(x:String, x:Object)">
          <Sequence sap:VirtualizedContainerService.HintSize="1004,1322" sap2010:WorkflowViewState.IdRef="Sequence_16">
            <Sequence.Variables>
              <Variable x:TypeArguments="njl:JArray" Name="testJarr" />
            </Sequence.Variables>
            <sap:WorkflowViewStateService.ViewState>
              <scg:Dictionary x:TypeArguments="x:String, x:Object">
                <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                <x:Boolean x:Key="IsPinned">False</x:Boolean>
              </scg:Dictionary>
            </sap:WorkflowViewStateService.ViewState>
            <Sequence sap2010:Annotation.AnnotationText="Once the user completes the form and presses a button, update the Config dictionary with new information from the Container. We have to append info to the Config dictionary instead of overwriting it because if you hid previous components, those field keys may be erased from the Config." DisplayName="Update Config with new info from Form" sap:VirtualizedContainerService.HintSize="942,507" sap2010:WorkflowViewState.IdRef="Sequence_26">
              <Sequence.Variables>
                <Variable x:TypeArguments="scg:Dictionary(x:String, x:Object)" Name="dict_objContainer" />
              </Sequence.Variables>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
              <ui:DeserializeJson x:TypeArguments="scg:Dictionary(x:String, x:Object)" DisplayName="Deserialize JSON" sap:VirtualizedContainerService.HintSize="434,69" sap2010:WorkflowViewState.IdRef="DeserializeJson`1_3" JsonObject="[dict_objContainer]" JsonString="[jsonconvert.SerializeObject(obj_container)]" />
              <ui:ForEach x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="434,204" sap2010:WorkflowViewState.IdRef="ForEach`1_1" Values="[dict_objContainer]">
                <ui:ForEach.Body>
                  <ActivityAction x:TypeArguments="scg:KeyValuePair(x:String, x:Object)">
                    <ActivityAction.Argument>
                      <DelegateInArgument x:TypeArguments="scg:KeyValuePair(x:String, x:Object)" Name="pair" />
                    </ActivityAction.Argument>
                    <Assign sap:VirtualizedContainerService.HintSize="262,70" sap2010:WorkflowViewState.IdRef="Assign_16">
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Object">[io_dict_Config(pair.Key)]</OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Object">[pair.Value]</InArgument>
                      </Assign.Value>
                    </Assign>
                  </ActivityAction>
                </ui:ForEach.Body>
              </ui:ForEach>
            </Sequence>
            <Assign DisplayName="Assign - Add button pressed to Config" sap:VirtualizedContainerService.HintSize="942,70" sap2010:WorkflowViewState.IdRef="Assign_14">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[io_dict_Config("selectedButton")]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:String">[str_selectedButton]</InArgument>
              </Assign.Value>
            </Assign>
            <Switch x:TypeArguments="x:String" DisplayName="Switch" Expression="[str_selectedButton]" sap:VirtualizedContainerService.HintSize="942,236" sap2010:WorkflowViewState.IdRef="Switch`1_1">
              <Switch.Default>
                <If Condition="[Convert.ToBoolean(io_dict_Config(&quot;pip&quot;))]" sap:VirtualizedContainerService.HintSize="713,270" sap2010:WorkflowViewState.IdRef="If_4">
                  <If.Then>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Switch workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_8" TargetSession="Child" UnSafe="True" WorkflowFileName="FormButtonAction.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_dict_Config">[io_dict_Config]</InOutArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </If.Then>
                  <If.Else>
                    <ui:InvokeWorkflowFile ArgumentsVariable="{x:Null}" ContinueOnError="{x:Null}" DisplayName="Invoke Switch workflow" sap:VirtualizedContainerService.HintSize="334,112" sap2010:WorkflowViewState.IdRef="InvokeWorkflowFile_9" UnSafe="False" WorkflowFileName="FormButtonAction.xaml">
                      <ui:InvokeWorkflowFile.Arguments>
                        <InOutArgument x:TypeArguments="scg:Dictionary(x:String, x:Object)" x:Key="io_dict_Config">[io_dict_Config]</InOutArgument>
                      </ui:InvokeWorkflowFile.Arguments>
                    </ui:InvokeWorkflowFile>
                  </If.Else>
                </If>
              </Switch.Default>
              <Sequence x:Key="cancel" DisplayName="Close form if selected button is Cancel" sap:VirtualizedContainerService.HintSize="420,330" sap2010:WorkflowViewState.IdRef="Sequence_25">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Assign DisplayName="Set cancel flag as true" sap:VirtualizedContainerService.HintSize="358,70" sap2010:WorkflowViewState.IdRef="Assign_15">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Object">[io_dict_Config("formCanceled")]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Object">[True]</InArgument>
                  </Assign.Value>
                </Assign>
                <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="358,101" sap2010:WorkflowViewState.IdRef="LogMessage_4" Level="Trace" Message="[&quot;User pressed Cancel button&quot;]" />
              </Sequence>
              <TryCatch x:Key="viewUserGuide" sap2010:Annotation.AnnotationText="Attempts to open user guide PDF" sap:VirtualizedContainerService.HintSize="438,365" sap2010:WorkflowViewState.IdRef="TryCatch_1">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <TryCatch.Try>
                  <ui:StartProcess Arguments="{x:Null}" WorkingDirectory="{x:Null}" DisplayName="Start Process" FileName="[io_dict_Config(&quot;userGuideUrl&quot;).ToString]" sap:VirtualizedContainerService.HintSize="334,97" sap2010:WorkflowViewState.IdRef="StartProcess_1" />
                </TryCatch.Try>
                <TryCatch.Catches>
                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_1">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ActivityAction x:TypeArguments="s:Exception">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                      </ActivityAction.Argument>
                      <uia:BroadcastMessage ContinueOnError="{x:Null}" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="334,142" sap2010:WorkflowViewState.IdRef="BroadcastMessage_3" Message="[io_dict_Config(&quot;userGuideUrl&quot;).ToString]" PollingInterval="10" Timeout="0" />
                    </ActivityAction>
                  </Catch>
                </TryCatch.Catches>
              </TryCatch>
              <TryCatch x:Key="viewDemo" sap2010:Annotation.AnnotationText="Attempts to open demo video" sap:VirtualizedContainerService.HintSize="438,365" sap2010:WorkflowViewState.IdRef="TryCatch_2">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <TryCatch.Try>
                  <ui:StartProcess Arguments="{x:Null}" WorkingDirectory="{x:Null}" DisplayName="Start Process" FileName="[io_dict_Config(&quot;demoVideoUrl&quot;).ToString]" sap:VirtualizedContainerService.HintSize="334,97" sap2010:WorkflowViewState.IdRef="StartProcess_2" />
                </TryCatch.Try>
                <TryCatch.Catches>
                  <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="404,21" sap2010:WorkflowViewState.IdRef="Catch`1_2">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                        <x:Boolean x:Key="IsPinned">False</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <ActivityAction x:TypeArguments="s:Exception">
                      <ActivityAction.Argument>
                        <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                      </ActivityAction.Argument>
                      <uia:BroadcastMessage ContinueOnError="{x:Null}" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="334,142" sap2010:WorkflowViewState.IdRef="BroadcastMessage_4" Message="[io_dict_Config(&quot;demoVideoUrl&quot;).ToString]" PollingInterval="10" Timeout="0" />
                    </ActivityAction>
                  </Catch>
                </TryCatch.Catches>
              </TryCatch>
              <Sequence x:Key="retrieveEmails" DisplayName="Gets the first 25 emails from the users inbox" sap:VirtualizedContainerService.HintSize="922,287" sap2010:WorkflowViewState.IdRef="Sequence_27">
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                    <x:Boolean x:Key="IsPinned">False</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <Switch x:TypeArguments="x:Boolean" DisplayName="Switch" Expression="[io_dict_Config.ContainsKey(&quot;selectYourEmailAccount&quot;) AndAlso Not string.IsNullOrEmpty(io_dict_Config(&quot;selectYourEmailAccount&quot;).ToString)]" sap:VirtualizedContainerService.HintSize="860,168" sap2010:WorkflowViewState.IdRef="Switch`1_2">
                  <Sequence x:Key="True" sap:VirtualizedContainerService.HintSize="476,839" sap2010:WorkflowViewState.IdRef="Sequence_37">
                    <sap:WorkflowViewStateService.ViewState>
                      <scg:Dictionary x:TypeArguments="x:String, x:Object">
                        <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                      </scg:Dictionary>
                    </sap:WorkflowViewStateService.ViewState>
                    <uia:BroadcastMessage ContinueOnError="{x:Null}" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="434,142" sap2010:WorkflowViewState.IdRef="BroadcastMessage_8" Message="[&quot;Retrieving your top 25 emails from your inbox,&quot; + vbNewLine + &quot;please wait a moment&quot;]" PollingInterval="10" Timeout="0" />
                    <InvokeMethod DisplayName="Invoke Method" sap:VirtualizedContainerService.HintSize="434,144" sap2010:WorkflowViewState.IdRef="InvokeMethod_1" MethodName="Clear">
                      <InvokeMethod.TargetObject>
                        <InArgument x:TypeArguments="scg:List(x:String)">[list_emailSubjects]</InArgument>
                      </InvokeMethod.TargetObject>
                    </InvokeMethod>
                    <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="434,383" sap2010:WorkflowViewState.IdRef="TryCatch_4">
                      <TryCatch.Try>
                        <Sequence sap:VirtualizedContainerService.HintSize="476,648" sap2010:WorkflowViewState.IdRef="Sequence_38">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ui:GetOutlookMailMessages Filter="{x:Null}" FilterByMessageIds="{x:Null}" TimeoutMS="{x:Null}" Account="[io_dict_Config(&quot;selectYourEmailAccount&quot;).ToString]" DisplayName="Get Outlook Mail Messages" GetAttachements="False" sap:VirtualizedContainerService.HintSize="434,32" sap2010:WorkflowViewState.IdRef="GetOutlookMailMessages_1" MailFolder="Inbox" MarkAsRead="False" Messages="[list_emails]" OnlyUnreadMessages="False" OrderByDate="NewestFirst" Top="25" />
                          <ui:ForEach x:TypeArguments="snm:MailMessage" CurrentIndex="{x:Null}" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="434,194" sap2010:WorkflowViewState.IdRef="ForEach`1_2" Values="[list_emails]">
                            <ui:ForEach.Body>
                              <ActivityAction x:TypeArguments="snm:MailMessage">
                                <ActivityAction.Argument>
                                  <DelegateInArgument x:TypeArguments="snm:MailMessage" Name="mail" />
                                </ActivityAction.Argument>
                                <AddToCollection x:TypeArguments="x:String" Collection="[list_emailSubjects]" DisplayName="Add To Collection" sap:VirtualizedContainerService.HintSize="200,32" sap2010:WorkflowViewState.IdRef="AddToCollection`1_1" Item="[mail.Subject]" />
                              </ActivityAction>
                            </ui:ForEach.Body>
                          </ui:ForEach>
                          <uia:BroadcastMessage ContinueOnError="{x:Null}" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="434,142" sap2010:WorkflowViewState.IdRef="BroadcastMessage_7" Message="[&quot;The top 25 emails were retrieved,&quot; + vbNewLine + &quot;please select an email from the dropdown.&quot;]" PollingInterval="10" Timeout="0" />
                          <Assign sap:VirtualizedContainerService.HintSize="434,70" sap2010:WorkflowViewState.IdRef="Assign_38">
                            <Assign.To>
                              <OutArgument x:TypeArguments="x:Object">[io_dict_Config("emailAddressPanelFlag")]</OutArgument>
                            </Assign.To>
                            <Assign.Value>
                              <InArgument x:TypeArguments="x:Object">[True]</InArgument>
                            </Assign.Value>
                          </Assign>
                        </Sequence>
                      </TryCatch.Try>
                      <TryCatch.Catches>
                        <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,211" sap2010:WorkflowViewState.IdRef="Catch`1_4">
                          <sap:WorkflowViewStateService.ViewState>
                            <scg:Dictionary x:TypeArguments="x:String, x:Object">
                              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                              <x:Boolean x:Key="IsPinned">False</x:Boolean>
                            </scg:Dictionary>
                          </sap:WorkflowViewStateService.ViewState>
                          <ActivityAction x:TypeArguments="s:Exception">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                            </ActivityAction.Argument>
                            <uia:BroadcastMessage ContinueOnError="{x:Null}" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="334,142" sap2010:WorkflowViewState.IdRef="BroadcastMessage_10" Message="[&quot;Unable to access the provided email account&quot; + vbNewLine + &quot;Please make sure you are using a corporate Outlook email account&quot;]" PollingInterval="10" Timeout="0" />
                          </ActivityAction>
                        </Catch>
                      </TryCatch.Catches>
                    </TryCatch>
                  </Sequence>
                  <uia:BroadcastMessage ContinueOnError="{x:Null}" x:Key="False" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="334,142" sap2010:WorkflowViewState.IdRef="BroadcastMessage_9" Message="Please provide an email address" PollingInterval="10" Timeout="0" />
                </Switch>
              </Sequence>
              <Sequence x:Key="drop" DisplayName="Get email addresses from selected email" sap:VirtualizedContainerService.HintSize="662,2683" sap2010:WorkflowViewState.IdRef="Sequence_32">
                <Sequence.Variables>
                  <Variable x:TypeArguments="snm:MailMessage" Name="email_pickedEmail" />
                </Sequence.Variables>
                <sap:WorkflowViewStateService.ViewState>
                  <scg:Dictionary x:TypeArguments="x:String, x:Object">
                    <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                  </scg:Dictionary>
                </sap:WorkflowViewStateService.ViewState>
                <ui:Comment sap:VirtualizedContainerService.HintSize="600,103" sap2010:WorkflowViewState.IdRef="Comment_1" Text="// This executes whenever the &quot;Select your email&quot; dropdown is changed. It grabs the email addresses from the selected email." />
                <Assign DisplayName="Clear attendee email list" sap:VirtualizedContainerService.HintSize="600,70" sap2010:WorkflowViewState.IdRef="Assign_36">
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Object">[io_dict_Config("attendeeEmailAddresses")]</OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Object">[""]</InArgument>
                  </Assign.Value>
                </Assign>
                <TryCatch DisplayName="Try Catch" sap:VirtualizedContainerService.HintSize="600,2308" sap2010:WorkflowViewState.IdRef="TryCatch_3">
                  <TryCatch.Try>
                    <Sequence DisplayName="Get email addresses from selected email" sap:VirtualizedContainerService.HintSize="562,1891" sap2010:WorkflowViewState.IdRef="Sequence_31">
                      <Sequence.Variables>
                        <Variable x:TypeArguments="scg:List(snm:MailMessage)" Name="list_pickedEmail" />
                      </Sequence.Variables>
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ui:ForEach x:TypeArguments="snm:MailMessage" CurrentIndex="{x:Null}" sap2010:Annotation.AnnotationText="Find email object that corresponds to selected email in the dropdown" DisplayName="For Each" sap:VirtualizedContainerService.HintSize="520,576" sap2010:WorkflowViewState.IdRef="ForEach`1_13" Values="[list_emails]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="snm:MailMessage">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="snm:MailMessage" Name="email" />
                            </ActivityAction.Argument>
                            <If Condition="[email.Subject =io_dict_Config(&quot;selectedEmailSubject&quot;).ToString]" sap:VirtualizedContainerService.HintSize="484,411" sap2010:WorkflowViewState.IdRef="If_10">
                              <If.Then>
                                <Sequence sap:VirtualizedContainerService.HintSize="304,214" sap2010:WorkflowViewState.IdRef="Sequence_34">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                  <Assign sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_33">
                                    <Assign.To>
                                      <OutArgument x:TypeArguments="snm:MailMessage">[email_pickedEmail]</OutArgument>
                                    </Assign.To>
                                    <Assign.Value>
                                      <InArgument x:TypeArguments="snm:MailMessage">[email]</InArgument>
                                    </Assign.Value>
                                  </Assign>
                                  <ui:Break sap:VirtualizedContainerService.HintSize="262,22" sap2010:WorkflowViewState.IdRef="Break_1" />
                                </Sequence>
                              </If.Then>
                              <If.Else>
                                <Sequence sap2010:WorkflowViewState.IdRef="Sequence_33">
                                  <sap:WorkflowViewStateService.ViewState>
                                    <scg:Dictionary x:TypeArguments="x:String, x:Object">
                                      <x:Boolean x:Key="IsExpanded">True</x:Boolean>
                                    </scg:Dictionary>
                                  </sap:WorkflowViewStateService.ViewState>
                                </Sequence>
                              </If.Else>
                            </If>
                          </ActivityAction>
                        </ui:ForEach.Body>
                        <sap:WorkflowViewStateService.ViewState>
                          <scg:Dictionary x:TypeArguments="x:String, x:Object">
                            <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                          </scg:Dictionary>
                        </sap:WorkflowViewStateService.ViewState>
                      </ui:ForEach>
                      <Assign DisplayName="Add From address to the string list" sap:VirtualizedContainerService.HintSize="520,60" sap2010:WorkflowViewState.IdRef="Assign_24">
                        <Assign.To>
                          <OutArgument x:TypeArguments="x:Object">[io_dict_Config("attendeeEmailAddresses")]</OutArgument>
                        </Assign.To>
                        <Assign.Value>
                          <InArgument x:TypeArguments="x:String">[email_pickedEmail.From.Address + "; "]</InArgument>
                        </Assign.Value>
                      </Assign>
                      <ui:ForEach x:TypeArguments="snm:MailAddress" CurrentIndex="{x:Null}" DisplayName="For Each - copy To email addresses" sap:VirtualizedContainerService.HintSize="520,371" sap2010:WorkflowViewState.IdRef="ForEach`1_16" Values="[email_pickedEmail.To]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="snm:MailAddress">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="snm:MailAddress" Name="emailAddress" />
                            </ActivityAction.Argument>
                            <If Condition="[Not string.IsNullOrEmpty(emailAddress.Address.ToString)]" sap:VirtualizedContainerService.HintSize="484,247" sap2010:WorkflowViewState.IdRef="If_11">
                              <If.Then>
                                <Assign DisplayName="Add address to the string list" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_30">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[io_dict_Config("attendeeEmailAddresses")]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Object">[io_dict_Config("attendeeEmailAddresses").ToString + emailAddress.Address.ToString + "; "]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                          </ActivityAction>
                        </ui:ForEach.Body>
                      </ui:ForEach>
                      <ui:ForEach x:TypeArguments="snm:MailAddress" CurrentIndex="{x:Null}" DisplayName="For Each - copy cc email addresses" sap:VirtualizedContainerService.HintSize="520,371" sap2010:WorkflowViewState.IdRef="ForEach`1_18" Values="[email_pickedEmail.cc]">
                        <ui:ForEach.Body>
                          <ActivityAction x:TypeArguments="snm:MailAddress">
                            <ActivityAction.Argument>
                              <DelegateInArgument x:TypeArguments="snm:MailAddress" Name="emailAddress" />
                            </ActivityAction.Argument>
                            <If Condition="[Not string.IsNullOrEmpty(emailAddress.Address.ToString)]" sap:VirtualizedContainerService.HintSize="484,247" sap2010:WorkflowViewState.IdRef="If_12">
                              <If.Then>
                                <Assign DisplayName="Add address to the string list" sap:VirtualizedContainerService.HintSize="262,60" sap2010:WorkflowViewState.IdRef="Assign_35">
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Object">[io_dict_Config("attendeeEmailAddresses")]</OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Object">[io_dict_Config("attendeeEmailAddresses").ToString + emailAddress.Address.ToString + "; "]</InArgument>
                                  </Assign.Value>
                                </Assign>
                              </If.Then>
                            </If>
                          </ActivityAction>
                        </ui:ForEach.Body>
                      </ui:ForEach>
                      <ui:LogMessage DisplayName="Private: Log Message" sap:VirtualizedContainerService.HintSize="520,91" sap2010:WorkflowViewState.IdRef="LogMessage_6" Level="Trace" Message="[io_dict_Config(&quot;attendeeEmailAddresses&quot;).ToString]" />
                      <uia:BroadcastMessage ContinueOnError="{x:Null}" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="520,132" sap2010:WorkflowViewState.IdRef="BroadcastMessage_6" Message="Email addresses successfully retrieved" PollingInterval="10" Timeout="0" />
                    </Sequence>
                  </TryCatch.Try>
                  <TryCatch.Catches>
                    <Catch x:TypeArguments="s:Exception" sap:VirtualizedContainerService.HintSize="400,201" sap2010:WorkflowViewState.IdRef="Catch`1_3">
                      <sap:WorkflowViewStateService.ViewState>
                        <scg:Dictionary x:TypeArguments="x:String, x:Object">
                          <x:Boolean x:Key="IsExpanded">False</x:Boolean>
                          <x:Boolean x:Key="IsPinned">False</x:Boolean>
                        </scg:Dictionary>
                      </sap:WorkflowViewStateService.ViewState>
                      <ActivityAction x:TypeArguments="s:Exception">
                        <ActivityAction.Argument>
                          <DelegateInArgument x:TypeArguments="s:Exception" Name="exception" />
                        </ActivityAction.Argument>
                        <uia:BroadcastMessage ContinueOnError="{x:Null}" Channel="[io_dict_Config(&quot;statusWindowChannel&quot;).ToString]" DisplayName="Broadcast Message" sap:VirtualizedContainerService.HintSize="334,132" sap2010:WorkflowViewState.IdRef="BroadcastMessage_5" Message="[&quot;Unable to retrieve email addresses from this email,&quot; + vbNewLine + &quot;please select another email or enter your email addresses manually.&quot;]" PollingInterval="10" Timeout="0" />
                      </ActivityAction>
                    </Catch>
                  </TryCatch.Catches>
                </TryCatch>
              </Sequence>
            </Switch>
            <Assign sap:VirtualizedContainerService.HintSize="942,70" sap2010:WorkflowViewState.IdRef="Assign_37">
              <Assign.To>
                <OutArgument x:TypeArguments="scg:List(x:String)">[list_selectedMeetingTimes]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="scg:List(x:String)">[JsonConvert.DeserializeObject(of list (of string))(io_dict_Config("list_selectedMeetingTimes").ToString)]</InArgument>
              </Assign.Value>
            </Assign>
            <Assign sap2010:Annotation.AnnotationText="After execution control is returned from the button's process, update the Container component with information from the Config dictionary so the form can be updated with new information." sap:VirtualizedContainerService.HintSize="942,157" sap2010:WorkflowViewState.IdRef="Assign_13">
              <Assign.To>
                <OutArgument x:TypeArguments="x:Object">[obj_container]</OutArgument>
              </Assign.To>
              <Assign.Value>
                <InArgument x:TypeArguments="x:Object">[io_dict_Config]</InArgument>
              </Assign.Value>
              <sap:WorkflowViewStateService.ViewState>
                <scg:Dictionary x:TypeArguments="x:String, x:Object">
                  <x:Boolean x:Key="IsAnnotationDocked">True</x:Boolean>
                </scg:Dictionary>
              </sap:WorkflowViewStateService.ViewState>
            </Assign>
          </Sequence>
        </ActivityAction>
      </ufa:FormActivity.Body>
      <ufa:FormActivity.DelayBody>
        <ActivityAction x:TypeArguments="scg:Dictionary(x:String, x:Object)">
          <Delay Duration="00:00:00.2500000" sap2010:WorkflowViewState.IdRef="Delay_1" />
        </ActivityAction>
      </ufa:FormActivity.DelayBody>
      <ufa:FormActivity.FormFieldsCollection>
        <InOutArgument x:TypeArguments="x:Object" x:Key="container">[obj_container]</InOutArgument>
        <InArgument x:TypeArguments="x:String" x:Key="logF_BusinessProcessName">[io_dict_Config("logF_BusinessProcessName").ToString]</InArgument>
        <InArgument x:TypeArguments="x:String" x:Key="automationDescription">[io_dict_Config("automationDescription").ToString]</InArgument>
        <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="selectedEmailSubject_dropdown">[list_emailSubjects]</InOutArgument>
        <InOutArgument x:TypeArguments="scg:List(x:String)" x:Key="internalSelectedMeetingTime_dropdown">[list_selectedMeetingTimes]</InOutArgument>
      </ufa:FormActivity.FormFieldsCollection>
    </ufa:FormActivity>
    <If Condition="[str_selectedButton is Nothing]" DisplayName="If user closes Form by pressing the X button" sap:VirtualizedContainerService.HintSize="1022,498" sap2010:WorkflowViewState.IdRef="If_2">
      <sap:WorkflowViewStateService.ViewState>
        <scg:Dictionary x:TypeArguments="x:String, x:Object">
          <x:Boolean x:Key="IsExpanded">True</x:Boolean>
          <x:Boolean x:Key="IsPinned">False</x:Boolean>
        </scg:Dictionary>
      </sap:WorkflowViewStateService.ViewState>
      <If.Then>
        <Sequence DisplayName="Set cancel flag" sap:VirtualizedContainerService.HintSize="400,301" sap2010:WorkflowViewState.IdRef="Sequence_24">
          <sap:WorkflowViewStateService.ViewState>
            <scg:Dictionary x:TypeArguments="x:String, x:Object">
              <x:Boolean x:Key="IsExpanded">True</x:Boolean>
            </scg:Dictionary>
          </sap:WorkflowViewStateService.ViewState>
          <ui:LogMessage DisplayName="Log Message" sap:VirtualizedContainerService.HintSize="358,101" sap2010:WorkflowViewState.IdRef="LogMessage_3" Level="Trace" Message="[&quot;User closed Form by pressing 'X'&quot;]" />
          <Assign DisplayName="Set cancel flag as true" sap:VirtualizedContainerService.HintSize="358,70" sap2010:WorkflowViewState.IdRef="Assign_1">
            <Assign.To>
              <OutArgument x:TypeArguments="x:Object">[io_dict_Config("formCanceled")]</OutArgument>
            </Assign.To>
            <Assign.Value>
              <InArgument x:TypeArguments="x:Object">[True]</InArgument>
            </Assign.Value>
          </Assign>
        </Sequence>
      </If.Then>
    </If>
  </Sequence>
</Activity>